<?php

namespace A2Global\A2Platform\Bundle\PlatformBundle\Data\FilterApplier;

use A2Global\A2Platform\Bundle\CoreBundle\Utility\QueryBuilderUtility;
use A2Global\A2Platform\Bundle\PlatformBundle\Data\Filter\ContainsFilter;
use A2Global\A2Platform\Bundle\PlatformBundle\Data\Filter\EqualsFilter;
use A2Global\A2Platform\Bundle\PlatformBundle\Data\Filter\FieldContainsFilter;
use A2Global\A2Platform\Bundle\PlatformBundle\Data\Filter\FilterInterface;
use A2Global\A2Platform\Bundle\PlatformBundle\Data\Filter\PaginationFilter;
use A2Global\A2Platform\Bundle\PlatformBundle\Data\Reader\ArrayDataReader;
use A2Global\A2Platform\Bundle\PlatformBundle\Data\Reader\DataReaderInterface;
use A2Global\A2Platform\Bundle\PlatformBundle\Data\Reader\QueryBuilderDataReader;
use Doctrine\ORM\QueryBuilder;

class QueryBuilderFieldContainsFilterApplier implements FilterApplierInterface
{
    public function supports(DataReaderInterface $dataReader, FilterInterface $filter): bool
    {
        return $dataReader instanceof QueryBuilderDataReader && $filter instanceof FieldContainsFilter;
    }

    public function apply(DataReaderInterface $dataReader, FilterInterface $filter)
    {
        /** @var FieldContainsFilter $filter */
        /** @var QueryBuilder $queryBuilder */
        $queryBuilder = $dataReader->getSource();
        $fieldPath = QueryBuilderUtility::getFieldPathByName($queryBuilder, $filter->getFieldName());
        $queryBuilder
            ->andWhere(sprintf('%s LIKE :%sContains', $fieldPath, $filter->getFieldName()))
            ->setParameter(sprintf('%sContains', $filter->getFieldName()), sprintf('%%%s%%', $filter->getQuery()));
    }
}